{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Srilatha-AzureADF"
		},
		"ADLS_1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS_1'"
		},
		"ADLS_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS_LS'"
		},
		"ASQL_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ASQL_LS'"
		},
		"AzSQL_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzSQL_LS'"
		},
		"AzureBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlob'"
		},
		"parameter_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'parameter_LS'",
			"defaultValue": "Integrated Security=False;Data Source=@{linkedService().servername};Initial Catalog=@{linkedService().DBname};User ID=@{linkedService().username};Password=@{linkedService().password}"
		},
		"selfhost_IR_conn_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'selfhost_IR_conn'"
		},
		"selfhost_SSQL_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'selfhost_SSQL_LS'"
		},
		"ADLS_1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://srilathadlsgen2.dfs.core.windows.net/"
		},
		"ADLS_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://srilathadlsgen2.dfs.core.windows.net/"
		},
		"RestAPI_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://restapi.adequateshop.com"
		},
		"Rest_Token_Pages_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://restapi.adequateshop.com"
		},
		"TW_SQLDB_TXT_properties_pipeline_parameters_Parameter_1": {
			"type": "string",
			"defaultValue": "@trigger().startTime"
		},
		"event_storgae_properties_CopyPipeline_sqldb_txt_parameters_Parameter_1": {
			"type": "string",
			"defaultValue": "@trigger().startTime"
		},
		"event_storgae_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e3fdc694-417b-44fa-9f88-541270829fbf/resourceGroups/AzureDev/providers/Microsoft.Storage/storageAccounts/srilathadlsgen2"
		},
		"event_trigger_txt_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/e3fdc694-417b-44fa-9f88-541270829fbf/resourceGroups/AzureDev/providers/Microsoft.Storage/storageAccounts/srilathadlsgen2"
		},
		"srilu-selfhost-IR_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/e3fdc694-417b-44fa-9f88-541270829fbf/resourcegroups/AzureDev/providers/Microsoft.DataFactory/factories/Srilatha-AzureADF/integrationruntimes/selfhosted-srilatha"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADF_teams_msgs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set JSON",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Messagecard",
							"value": {
								"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message​​​​\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Pipeline execution alert​​​​\",\n            \"facts\": [\n                {\n                    \"name\": \"Subscription Id:\",\n                    \"value\": \"@{pipeline().parameters.subscription}\"\n                },\n                {\n                    \"name\": \"Resource Group:\",\n                    \"value\": \"@{pipeline().parameters.resourceGroup}\"\n                },\n                {\n                    \"name\": \"Data Factory Name:\",\n                    \"value\": \"@{pipeline().DataFactory}\"\n                },\n                {\n                    \"name\": \"Pipeline RunId:\",\n                    \"value\": \"@{pipeline().parameters.runId}\"\n                },\n                {\n                    \"name\": \"Pipline Name:\",\n                    \"value\": \"@{pipeline().parameters.name}\"\n                },\n                {\n                    \"name\": \"Pipeline Status:\",\n                    \"value\": \"@{pipeline().parameters.status}\"\n                },\n                {\n                    \"name\": \"Execution Start Time (UTC):\",\n                    \"value\": \"@{pipeline().parameters.triggerTime}\"\n                },\n                {\n                    \"name\": \"Execution Finish Time (UTC):\",\n                    \"value\": \"@{pipeline().parameters.executionEndTime}\"\n                },\n                {\n                    \"name\": \"Execution Duration (s):\",\n                    \"value\": \"@{pipeline().parameters.runDuration}\"\n                },\n                {\n                    \"name\": \"Message:\",\n                    \"value\": \"@{pipeline().parameters.message}\"\n                },\n                {\n                    \"name\": \"Notification Time (UTC):\",\n                    \"value\": \"@{utcnow()}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"@type\": \"OpenUri\",\n            \"name\": \"View pipeline run\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \"@{concat('https://synapse.azure.com/monitoring/pipelineruns/',pipeline().parameters.runId,'?factory=/subscriptions/',pipeline().parameters.subscription,'/resourceGroups/',pipeline().parameters.resourceGroup,'/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory)}\"\n                }\n            ]\n        }\n    ]\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Teams Webhook Url",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set JSON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.webhhok_url",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(variables('Messagecard'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"webhhok_url": {
						"type": "string",
						"defaultValue": "https://synh.webhook.office.com/webhookb2/82b07926-1e5b-4118-9d03-2dfc9ce5f686@a5c5a766-129a-47bb-924c-43805e856501/IncomingWebhook/509acfbf7e9c4989a53acec05645c393/e17fcfac-97ef-4fe8-858b-43d4af8b16f5"
					},
					"subscription": {
						"type": "string",
						"defaultValue": "Specify subscription id for the pipeline"
					},
					"resourceGroup": {
						"type": "string",
						"defaultValue": "Specify resource group name for the pipeline"
					},
					"runId": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').output['pipelineRunId']"
					},
					"name": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').output['pipelineName']"
					},
					"triggerTime": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').ExecutionStartTime"
					},
					"status": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').Status"
					},
					"message": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').Error['message']"
					},
					"executionEndTime": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').ExecutionEndTime"
					},
					"runDuration": {
						"type": "string",
						"defaultValue": "@activity('Specify name of the calling pipeline').Duration"
					}
				},
				"variables": {
					"Messagecard": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T10:14:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "loading csv file as Json with nested hierarchy using azure data factory mapping data flows.",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CSV_JSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T14:06:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CSV_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copying the data from source to sink file",
				"activities": [
					{
						"name": "Copy Employee  Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "samplecontainer/input/"
							},
							{
								"name": "Destination",
								"value": "samplecontainer/output/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "filepath",
										"value": "$$FILEPATH"
									},
									{
										"name": "filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"Emp"
				],
				"lastPublishTime": "2023-12-25T07:04:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_SQLDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copying the data from text file to Database",
				"activities": [
					{
						"name": "CopyTXT_SQLDB",
						"description": "Copying data from text file to SQL data base",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "samplecontainer/input/inputemp.txt"
							},
							{
								"name": "Destination",
								"value": "dbo.emp"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_jpu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_jpu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-21T13:27:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_jpu')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_jpu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_sqldb_txt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we are copying the data from SQL DB to csv file",
				"activities": [
					{
						"name": "copy_SQLDB_TXT",
						"description": "copying data from DB to text file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.emp"
							},
							{
								"name": "Destination",
								"value": "samplecontainer/output/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "Last_loaded_date",
										"value": ""
									}
								],
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DestinationDataset_jpu",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Parameter_1": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.parameter_1"
					},
					"Parameter_2": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.parameter_2"
					},
					"Parameter_3": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.parameter_3"
					},
					"Parameter_4": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.parameter_4"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-21T13:27:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_jpu')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "4. Delete old files from storage using Azure Data Factory",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeEnd": {
									"value": "@adddays(utcnow(),-1)",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Deleting_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "deleting files in blob storage greater than 30 days",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "paramter_dataset_file",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@less(activity('Get Metadata2').output.lastModified,formatDateTime(addDays(utcnow(),-1 ),'yyyy-MM-ddThh:mm:ssZ'))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete1",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "paramter_dataset_file",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-25T08:11:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdataset')]",
				"[concat(variables('factoryId'), '/datasets/paramter_dataset_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute_pipeline_REST_API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute ADF pipeline via REST API call",
						"description": " Execute ADF pipeline via REST API call",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://management.azure.com/subscriptions/e3fdc694-417b-44fa-9f88-541270829fbf/resourceGroups/AzureDev/providers/Microsoft.DataFactory/factories/Srilatha-AzureADF/pipelines/CopyPipeline/createRun?api-version=2018-06-01",
							"method": "POST",
							"headers": {},
							"body": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-28T14:09:36Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileNames_Dynamically')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "2. Get File Names from Source Folder Dynamically in Azure Data Factory.mp4",
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "output",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get_latest_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "get the latest file from folder and process it.",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "/"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "loop through files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"itemName",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(formatDateTime(activity('Get Metadata2').output.lastModified,'yyyyMMddHHmmss'),formatDateTime(variables('Prev_last_modified_date'),'yyyyMMddHHmmss') )",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Latest_File",
													"value": {
														"value": "@activity('Get Metadata2').output.itemName",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set variable1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Prev_last_modified_date",
													"value": {
														"value": "@activity('Get Metadata2').output.lastModified",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "loop through files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": {
										"value": "@variables('Latest_File')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Latest_File": {
						"type": "String"
					},
					"Prev_last_modified_date": {
						"type": "String",
						"defaultValue": "1900-01-01T14:12:03Z"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T17:39:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "converting json files to csv files",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "json1_csv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"FileName": "json_sample2.json"
									},
									"source2": {
										"FileName": "json_sample3.json"
									},
									"source3": {
										"FileName": "json_sample4.json"
									},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:17:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/json1_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load API Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "Bearer @{activity('Web1').output.data.Token}",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"AbsoluteUrl.value": "RANGE:0:1000:",
									"EndCondition:$.data": "Empty"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "user_id"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['email']"
										},
										"sink": {
											"name": "email"
										}
									},
									{
										"source": {
											"path": "[['profilepicture']"
										},
										"sink": {
											"name": "Profile_Picture"
										}
									},
									{
										"source": {
											"path": "[['location']"
										},
										"sink": {
											"name": "location"
										}
									},
									{
										"source": {
											"path": "[['createdat']"
										},
										"sink": {
											"name": "create_date"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "Rest_Token_Pages_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_jpu",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/authaccount/login",
							"method": "POST",
							"headers": {},
							"body": {
								"email": "srilatha12@gmail.com",
								"password": "srilatha12"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-29T12:13:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_Token_Pages_DS')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_jpu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_json_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Json Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Rest_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Json_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T17:16:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_dataset')]",
				"[concat(variables('factoryId'), '/datasets/Json_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_json_data_token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Working with Token based REST API in Azure Data Factory",
				"activities": [
					{
						"name": "Login_user",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/authaccount/login",
							"method": "POST",
							"headers": {},
							"body": {
								"email": "srilatha12@gmail.com",
								"password": "srilatha12"
							}
						}
					},
					{
						"name": "Get Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Login_user",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/users",
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Login_user').output.data.Token}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Loop through pages",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@Range(1,3)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data API Data to a table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": {
													"value": "Bearer @{activity('Login_user').output.data.Token}",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "user_id"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"name": "user_name"
													}
												},
												{
													"source": {
														"path": "[['email']"
													},
													"sink": {
														"name": "user_email"
													}
												},
												{
													"source": {
														"path": "[['profilepicture']"
													},
													"sink": {
														"name": "user_profile_picture"
													}
												},
												{
													"source": {
														"path": "[['location']"
													},
													"sink": {
														"name": "user_location"
													}
												},
												{
													"source": {
														"path": "[['createdat']"
													},
													"sink": {
														"name": "cretedat"
													}
												}
											],
											"collectionReference": "$['data']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "Rest_Token_Pages_DS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "employeedataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-29T12:13:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_Token_Pages_DS')]",
				"[concat(variables('factoryId'), '/datasets/employeedataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_json_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copying the data from rest api data to laod in a table ",
				"activities": [
					{
						"name": "Load Json data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['employee_name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['employee_salary']"
										},
										"sink": {
											"name": "salary"
										}
									},
									{
										"source": {
											"path": "[['employee_age']"
										},
										"sink": {
											"name": "age"
										}
									},
									{
										"source": {
											"path": "[['profile_image']"
										},
										"sink": {
											"name": "profile_image"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "$['message']"
										},
										"sink": {
											"name": "message"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "Rest_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-28T10:52:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Rest_dataset')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process_fixed_length_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "5. Process fixed length text files by Azure Data Factory mapping data flows",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fixed_length_files",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fixed_length_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "archive files after copying  from files to SQL DB",
				"activities": [
					{
						"name": "Copy_file_SServer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"DEPARTMENT_ID"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LOCATION_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LOCATION_ID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Archiveing File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Archie_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy_file_SServer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Archiveing File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://sendemailnotification1.azurewebsites.net:443/api/sateful_workflow/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=sO1_rBk3SHn-TurKQKXH7FX5hWKcDnWJmPJZKvXyv8c",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "String",
						"defaultValue": "srilathacse01@outlook.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T13:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/empdataset')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/Archie_dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/child_pipeline_excel_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[Getsheetname]",
								"storedProcedureParameters": {
									"FILENAME": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.filename",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZsql_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dbo.lkp_config"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "samplecontainer/input/@{pipeline().parameters.filename}"
										},
										{
											"name": "Destination",
											"value": "dbo.@{item().sheet_name}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "excel_ds",
											"type": "DatasetReference",
											"parameters": {
												"sheet_name": {
													"value": "@item().sheet_name",
													"type": "Expression"
												},
												"File_name": {
													"value": "@pipeline().parameters.filename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZsql_DS",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().sheet_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T08:32:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AZsql_DS')]",
				"[concat(variables('factoryId'), '/datasets/excel_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_files_wildcards')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "input",
									"wildcardFileName": "*sample*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T11:46:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_mutiple_files_sqlDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": " how to create table at run time and load multiple files from blob storage using azure data factory:",
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lookup_file_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@item().Prop_0",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZsql_DS",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@replace(item().Prop_0,'.csv','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T12:58:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookup_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]",
				"[concat(variables('factoryId'), '/datasets/AZsql_DS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyfiles_based_on_last_modified_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "3. Incrementally copy new and changed files based on Last Modified Date in Azure Data Factory",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copying_data_excel_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To load data from multiple excel sheets to multiple SQL table using azure data factory.",
				"activities": [
					{
						"name": "lkp_config_sheets",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZsql_DS",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "lk_config"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Loop through excel sheets",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_config_sheets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_config_sheets').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copy_sheets",
									"description": "copying multiple sheets from excel workbook to multiple tables.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "excel_ds",
											"type": "DatasetReference",
											"parameters": {
												"sheet_name": {
													"value": "@item().sheet_name",
													"type": "Expression"
												},
												"File_name": "PlayersData.xlsx"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZsql_DS",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().sheet_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-04T14:31:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AZsql_DS')]",
				"[concat(variables('factoryId'), '/datasets/excel_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delete_files_size_greater_1MB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "deleting files greater than 1 MB ",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "datasetfile",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata2').output.size,250)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete1",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datasetfile",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T07:29:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/outputdataset')]",
				"[concat(variables('factoryId'), '/datasets/datasetfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/diff_size_blob_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": "input",
												"FileName": {
													"value": "@activity('Get Metadata2').output.itemName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@if(less(activity('Get Metadata2').output.size,1000),'1KB', \r\nif(less(activity('Get Metadata2').output.size,2000),'2KB'\r\n,'Morethan2KB' ))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@activity('Get Metadata2').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T10:08:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/extract_zip_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.zip",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Zipfile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": "\\"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": {
										"value": "@concat('_',formatDateTime(utcnow(),'dd/MM/yy'))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T14:28:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Zipfile_ds')]",
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_cnt_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "to insert into file count into table. ",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "\\",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Delimited_param",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"FileName": "\\"
											}
										},
										"fieldList": [
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Filter1",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get Metadata2').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(1,1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Filter1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[getFilecount]",
										"storedProcedureParameters": {
											"filecnt": {
												"value": {
													"value": "@activity('Filter1').output.ItemsCount",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"filename": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzSQL_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T17:02:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]",
				"[concat(variables('factoryId'), '/linkedServices/AzSQL_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_folders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get metadata from Blob storage with \"folder like structure\" using Azure Data Factory pipeline",
				"activities": [
					{
						"name": "Get Metadata1",
						"description": "metadata from",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_1",
								"type": "DatasetReference",
								"parameters": {
									"dir": "/"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item().type,'Folder')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "get_subfolders",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"dir1": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"foldervariable": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-26T17:08:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_1')]",
				"[concat(variables('factoryId'), '/pipelines/get_subfolders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_subfolders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "creating pipeline to het list of sub folders and files",
				"activities": [
					{
						"name": "subfolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_1",
								"type": "DatasetReference",
								"parameters": {
									"dir": {
										"value": "@concat(pipeline().parameters.dir1,'/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "loop through sub folders",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "subfolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('subfolder').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "get_subfolders_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Path": {
												"value": "@concat(pipeline().parameters.dir1,'/',item().name,'/')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dir1": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-26T15:50:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_1')]",
				"[concat(variables('factoryId'), '/pipelines/get_subfolders_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_subfolders_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get list of files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_1",
								"type": "DatasetReference",
								"parameters": {
									"dir": {
										"value": "@pipeline().parameters.Path",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "loop through subfolders and files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get list of files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get list of files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Path": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-26T11:54:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/increment_keys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "increment_keys",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"allemp": {
										"FolderName": "increment",
										"FileName": "allemp.csv"
									},
									"allemp2": {
										"FolderName": "increment",
										"FileName": "allemp.csv"
									},
									"getmaxkey": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-08T12:14:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/increment_keys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mergerows_singlerow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "merge_mutiple_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T16:52:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/merge_mutiple_rows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_log_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pipeline_runs",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://management.azure.com/subscriptions/e3fdc694-417b-44fa-9f88-541270829fbf/resourceGroups/azuredev/providers/Microsoft.DataFactory/factories/sriluadf/queryPipelineRuns?api-version=2018-06-01",
							"method": "POST",
							"headers": {},
							"body": {
								"lastUpdatedAfter": "2023-12-01T00:00:44.3345758Z",
								"lastUpdatedBefore": "2024-01-31T00:00:48.3686473Z"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com/"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "pipeline_runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('pipeline_runs').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[getlogdetails]",
										"storedProcedureParameters": {
											"durationInMs": {
												"value": {
													"value": "@item().durationInMs",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"message": {
												"value": {
													"value": "@item().message",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelinename": {
												"value": {
													"value": "@item().pipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"runend": {
												"value": {
													"value": "@item().runEnd",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"runid": {
												"value": {
													"value": "@item().runId",
													"type": "Expression"
												},
												"type": "String"
											},
											"runStart": {
												"value": {
													"value": "@item().runStart",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": {
													"value": "@item().status",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzSQL_LS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-07T17:09:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQL_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/process_multiple_excel_sheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name,'.xlsx')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "child_pipeline_excel_files",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"filename": {
															"value": "@item().name",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T08:18:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]",
				"[concat(variables('factoryId'), '/pipelines/child_pipeline_excel_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/split_rows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "split_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-01T11:13:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/split_rows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/totalsal_window_fnc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "find_runtotal",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-08T16:19:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/find_runtotal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/zip_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Zipfile_ds",
								"type": "DatasetReference",
								"parameters": {
									"filename": "zip_folder.zip"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T11:07:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/Zipfile_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZsql_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzSQL_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzSQL_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Archie_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Archive",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Created to get folders",
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dir": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().dir",
							"type": "Expression"
						},
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sample2.csv",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": "$",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delimited_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_jpu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ASQL_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "users"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ASQL_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "example_2.json",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "json_sample.json",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_output_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "samplecontainer"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_Token_Pages_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Rest_Token_Pages",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "/api/users?page={value}"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Rest_Token_Pages')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestAPI_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestAPI_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSQL_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "HIRE_DATE",
						"type": "date"
					},
					{
						"name": "JOB_ID",
						"type": "nvarchar"
					},
					{
						"name": "SALARY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMISSION_PCT",
						"type": "nvarchar"
					},
					{
						"name": "MANAGER_ID",
						"type": "nvarchar"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/selfhost_IR_conn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_jpu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "inputemp.txt",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "HIRE_DATE",
						"type": "date"
					},
					{
						"name": "JOB_ID",
						"type": "nvarchar"
					},
					{
						"name": "SALARY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMISSION_PCT",
						"type": "nvarchar"
					},
					{
						"name": "MANAGER_ID",
						"type": "nvarchar"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "departments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/selfhost_IR_conn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Zipfile_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dl1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "allemp.csv",
						"folderPath": "increment",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "hrow_id",
						"type": "String"
					},
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delimited_file_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employees1.csv",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delimited_output_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "increment",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/empdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"annotations": [
					"Emp"
				],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments.csv",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "HIRE_DATE",
						"type": "date"
					},
					{
						"name": "JOB_ID",
						"type": "nvarchar"
					},
					{
						"name": "SALARY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMISSION_PCT",
						"type": "nvarchar"
					},
					{
						"name": "MANAGER_ID",
						"type": "nvarchar"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "userdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/selfhost_IR_conn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/excel_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sheet_name": {
						"type": "string"
					},
					"File_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheet_name",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File_name",
							"type": "Expression"
						},
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup_file_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lookup.txt",
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameter_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/selfhost_IR_conn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramter_dataset_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "input",
						"fileSystem": "samplecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection string to connect storage account.",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ASQL_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Azure SQL Linked Connection",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ASQL_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzSQL_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [
					"Azure Dev"
				],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('AzSQL_LS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestAPI_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestAPI_LS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Rest_Token_Pages')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Rest_Token_Pages_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameter_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"servername": {
						"type": "String"
					},
					"DBname": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('parameter_LS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfhosted-srilatha",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhosted-srilatha')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhost_IR_conn')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connecting azure data factory from cloud to on primeses network.",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('selfhost_IR_conn_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfhosted-srilatha",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhosted-srilatha')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhost_SSQL_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('selfhost_SSQL_LS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "srilu-selfhost-IR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/srilu-selfhost-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TW_SQLDB_TXT')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyPipeline_sqldb_txt",
						"type": "PipelineReference"
					},
					"parameters": {
						"Parameter_1": "[parameters('TW_SQLDB_TXT_properties_pipeline_parameters_Parameter_1')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-12-21T09:00:00Z",
					"endTime": "2023-12-21T13:40:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"offset": "0.00:00:00",
							"referenceTrigger": {
								"referenceName": "TW_TXT_SQLDB",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_sqldb_txt')]",
				"[concat(variables('factoryId'), '/triggers/TW_TXT_SQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TW_TXT_SQLDB')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "CopyPipeline_SQLDB",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-12-21T09:00:00Z",
					"endTime": "2023-12-21T10:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_SQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_test')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "for testing purpose",
				"annotations": [
					"Emp"
				],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2023-12-19T21:45:00",
						"endTime": "2023-12-19T21:59:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/event_storgae')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_sqldb_txt",
							"type": "PipelineReference"
						},
						"parameters": {
							"Parameter_1": "[parameters('event_storgae_properties_CopyPipeline_sqldb_txt_parameters_Parameter_1')]"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/samplecontainer/blobs/input",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('event_storgae_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_sqldb_txt')]",
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/event_trigger_txt')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyPipeline_SQLDB",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/samplecontainer/blobs/input",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('event_trigger_txt_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyPipeline_SQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhosted-srilatha')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "creating new IR to connect with on premises.",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srilu-selfhost-IR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('srilu-selfhost-IR_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_JSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "loading csv file as Json with nested hierarchy using azure data factory mapping data flows.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json_output_DS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Json_output_DS",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          ppu as double,",
						"          batter_id as integer,",
						"          batter_type as string,",
						"          topping_id as integer,",
						"          topping_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(topping = @(id=topping_id,",
						"          type=topping_type),",
						"          batters = @(batter=@(id=batter_id,",
						"          type=batter_type))) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters),",
						"     topping = collect(topping)) ~> aggregate1",
						"aggregate1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          topping,",
						"          ppu),",
						"     batter = collect(batters.batter)) ~> aggregate2",
						"source2 derive(data = split(data,',')) ~> derivedColumn2",
						"derivedColumn2 derive(key = 'X') ~> derivedColumn3",
						"derivedColumn3 aggregate(groupBy(key),",
						"     Data = collect(data)) ~> aggregate3",
						"aggregate3 select(mapColumn(",
						"          Data",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sampledata.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters = batter,",
						"          topping",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_1.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Data",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/Json_output_DS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/find_runtotal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(EMPLOYEE_ID, true),",
						"     total_sal = sum(SALARY)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalsal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fixed_length_files')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "5. Process fixed length text files by Azure Data Factory mapping data flows",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {FirstName     LastName     Age} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(First_Name = trim(substring({FirstName     LastName     Age},1,14),'     '),",
						"          Last_Name = trim(substring({FirstName     LastName     Age},15,13),'     '),",
						"          Age = substring({FirstName     LastName     Age},28,11)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          First_Name,",
						"          Last_Name,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['emp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          First_Name,",
						"          Last_Name,",
						"          Age",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/increment_keys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference"
							},
							"name": "allemp"
						},
						{
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference"
							},
							"name": "allemp2"
						}
					],
					"sinks": [
						{
							"name": "getmaxkey"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          hrow_id as integer,",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> allemp",
						"source(output(",
						"          hrow_id as integer,",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> allemp2",
						"source1 keyGenerate(output(hrow_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(maxkey = hrow_id+getmaxkey#outputs()[1].maxkey) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          hrow_id = maxkey,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"allemp aggregate(maxkey = max(hrow_id)) ~> aggregate1",
						"allemp2, select1 union(byName: true)~> union1",
						"aggregate1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          maxkey",
						"     )) ~> getmaxkey",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allemp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hrow_id,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/Delimited_param')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json1_csv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "flatten5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          batters as (batter as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          ppu as double,",
						"          topping as (id as short, type as string)[],",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source(output(",
						"          id as short,",
						"          image as (height as short, url as string, width as short),",
						"          name as string,",
						"          thumbnail as (height as short, url as string, width as short),",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source2",
						"source(output(",
						"          items as (item as (batters as (batter as (id as short, type as string)[]), id as short, name as string, ppu as double, topping as (id as short, type as string)[], type as string)[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source3",
						"source1 foldDown(unroll(batters.batter, batters.batter),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters_id = batters.batter.id,",
						"          batters_type = batters.batter.type,",
						"          topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(topping, topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters_id,",
						"          batters_type,",
						"          topping_id = topping.id,",
						"          topping_type = topping.type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten2",
						"aggregate1 foldDown(unroll(image),",
						"     mapColumn(",
						"          id = image.id,",
						"          type = image.type,",
						"          name = image.name,",
						"          image_url = image.image.url,",
						"          image_width = image.image.width,",
						"          image_height = image.image.height,",
						"          thumbnail_url = image.thumbnail.url,",
						"          thumbnail_width = image.thumbnail.width,",
						"          thumbnail_height = image.thumbnail.height",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"source2 aggregate(image = collect(@(id=id,type=type,name=name,image=image,thumbnail=thumbnail))) ~> aggregate1",
						"source3 foldDown(unroll(items.item),",
						"     mapColumn(",
						"          items_id = items.item.id,",
						"          items_type = items.item.type,",
						"          items_name = items.item.name,",
						"          batter_id = items.item.batters.batter,",
						"          topping_id = items.item.topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 foldDown(unroll(batter_id),",
						"     mapColumn(",
						"          items_id,",
						"          items_type,",
						"          items_name,",
						"          batter_id = batter_id.id,",
						"          batter_type = batter_id.type,",
						"          topping_id = topping_id.id,",
						"          topping_type = topping_id.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_json2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"flatten3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_json3.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          image_url,",
						"          image_width,",
						"          image_height,",
						"          thumbnail_url,",
						"          thumbnail_width,",
						"          thumbnail_height",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2",
						"flatten5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['json_sample4.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          items_id,",
						"          items_type,",
						"          items_name,",
						"          batter_id,",
						"          batter_type,",
						"          topping_id,",
						"          topping_type",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json1')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_csv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "converting json files to csv files",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_ds",
								"type": "DatasetReference"
							},
							"name": "json"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          batters as (batter as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          ppu as double,",
						"          topping as (id as short, type as string)[],",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> json",
						"json foldDown(unroll(batters.batter),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batter_id = batters.batter.id,",
						"          batter_type = batters.batter.type,",
						"          topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(topping, topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batter_id,",
						"          batter_type,",
						"          topping_id = topping.id,",
						"          topping_type = topping.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Json_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/merge_mutiple_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "how to merge multiple rows in to single row using mapping data flow in azure data factory",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_LS",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          ppu as double,",
						"          batter_id as short,",
						"          batter_type as string,",
						"          topping_id as short,",
						"          topping_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu),",
						"     topping = collect(topping_type)) ~> aggregate1",
						"aggregate1 derive(topping = replace(replace(toString(topping),']'),'[')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'samplecontainer',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['mergerows.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu,",
						"          topping",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/linkedServices/ADLS_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/split_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          batter_id as short,",
						"          batter_type as string,",
						"          ppu as double,",
						"          topping as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 derive(topping = split(topping,',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu,",
						"          toppings = topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['splitrows.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/delimited_file_ds')]",
				"[concat(variables('factoryId'), '/datasets/delimited_output_ds')]"
			]
		}
	]
}