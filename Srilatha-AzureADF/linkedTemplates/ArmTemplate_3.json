{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Srilatha-AzureADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/employeedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "HIRE_DATE",
						"type": "date"
					},
					{
						"name": "JOB_ID",
						"type": "nvarchar"
					},
					{
						"name": "SALARY",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "COMMISSION_PCT",
						"type": "nvarchar"
					},
					{
						"name": "MANAGER_ID",
						"type": "nvarchar"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "userdata"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameter_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "selfhost_IR_conn",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_JSON')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "loading csv file as Json with nested hierarchy using azure data factory mapping data flows.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Json_output_DS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Json_output_DS",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          ppu as double,",
						"          batter_id as integer,",
						"          batter_type as string,",
						"          topping_id as integer,",
						"          topping_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          data as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1 derive(topping = @(id=topping_id,",
						"          type=topping_type),",
						"          batters = @(batter=@(id=batter_id,",
						"          type=batter_type))) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters),",
						"     topping = collect(topping)) ~> aggregate1",
						"aggregate1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          topping,",
						"          ppu),",
						"     batter = collect(batters.batter)) ~> aggregate2",
						"source2 derive(data = split(data,',')) ~> derivedColumn2",
						"derivedColumn2 derive(key = 'X') ~> derivedColumn3",
						"derivedColumn3 aggregate(groupBy(key),",
						"     Data = collect(data)) ~> aggregate3",
						"aggregate3 select(mapColumn(",
						"          Data",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sampledata.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters = batter,",
						"          topping",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_1.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Data",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/find_runtotal')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(EMPLOYEE_ID, true),",
						"     total_sal = sum(SALARY)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalsal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/fixed_length_files')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "5. Process fixed length text files by Azure Data Factory mapping data flows",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {FirstName     LastName     Age} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(First_Name = trim(substring({FirstName     LastName     Age},1,14),'     '),",
						"          Last_Name = trim(substring({FirstName     LastName     Age},15,13),'     '),",
						"          Age = substring({FirstName     LastName     Age},28,11)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          First_Name,",
						"          Last_Name,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['emp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          First_Name,",
						"          Last_Name,",
						"          Age",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/increment_keys')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference"
							},
							"name": "allemp"
						},
						{
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference"
							},
							"name": "allemp2"
						}
					],
					"sinks": [
						{
							"name": "getmaxkey"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          hrow_id as integer,",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> allemp",
						"source(output(",
						"          hrow_id as integer,",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> allemp2",
						"source1 keyGenerate(output(hrow_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(maxkey = hrow_id+getmaxkey#outputs()[1].maxkey) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          hrow_id = maxkey,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"allemp aggregate(maxkey = max(hrow_id)) ~> aggregate1",
						"allemp2, select1 union(byName: true)~> union1",
						"aggregate1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          maxkey",
						"     )) ~> getmaxkey",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['allemp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hrow_id,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/json1_csv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "flatten5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          batters as (batter as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          ppu as double,",
						"          topping as (id as short, type as string)[],",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source(output(",
						"          id as short,",
						"          image as (height as short, url as string, width as short),",
						"          name as string,",
						"          thumbnail as (height as short, url as string, width as short),",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source2",
						"source(output(",
						"          items as (item as (batters as (batter as (id as short, type as string)[]), id as short, name as string, ppu as double, topping as (id as short, type as string)[], type as string)[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source3",
						"source1 foldDown(unroll(batters.batter, batters.batter),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters_id = batters.batter.id,",
						"          batters_type = batters.batter.type,",
						"          topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(topping, topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batters_id,",
						"          batters_type,",
						"          topping_id = topping.id,",
						"          topping_type = topping.type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten2",
						"aggregate1 foldDown(unroll(image),",
						"     mapColumn(",
						"          id = image.id,",
						"          type = image.type,",
						"          name = image.name,",
						"          image_url = image.image.url,",
						"          image_width = image.image.width,",
						"          image_height = image.image.height,",
						"          thumbnail_url = image.thumbnail.url,",
						"          thumbnail_width = image.thumbnail.width,",
						"          thumbnail_height = image.thumbnail.height",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"source2 aggregate(image = collect(@(id=id,type=type,name=name,image=image,thumbnail=thumbnail))) ~> aggregate1",
						"source3 foldDown(unroll(items.item),",
						"     mapColumn(",
						"          items_id = items.item.id,",
						"          items_type = items.item.type,",
						"          items_name = items.item.name,",
						"          batter_id = items.item.batters.batter,",
						"          topping_id = items.item.topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 foldDown(unroll(batter_id),",
						"     mapColumn(",
						"          items_id,",
						"          items_type,",
						"          items_name,",
						"          batter_id = batter_id.id,",
						"          batter_type = batter_id.type,",
						"          topping_id = topping_id.id,",
						"          topping_type = topping_id.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_json2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"flatten3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample_json3.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          image_url,",
						"          image_width,",
						"          image_height,",
						"          thumbnail_url,",
						"          thumbnail_width,",
						"          thumbnail_height",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2",
						"flatten5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['json_sample4.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          items_id,",
						"          items_type,",
						"          items_name,",
						"          batter_id,",
						"          batter_type,",
						"          topping_id,",
						"          topping_type",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_csv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "converting json files to csv files",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Json_ds",
								"type": "DatasetReference"
							},
							"name": "json"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          batters as (batter as (id as short, type as string)[]),",
						"          id as short,",
						"          name as string,",
						"          ppu as double,",
						"          topping as (id as short, type as string)[],",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> json",
						"json foldDown(unroll(batters.batter),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batter_id = batters.batter.id,",
						"          batter_type = batters.batter.type,",
						"          topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(topping, topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          ppu,",
						"          batter_id,",
						"          batter_type,",
						"          topping_id = topping.id,",
						"          topping_type = topping.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sample.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/merge_mutiple_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "how to merge multiple rows in to single row using mapping data flow in azure data factory",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ADLS_LS",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          ppu as double,",
						"          batter_id as short,",
						"          batter_type as string,",
						"          topping_id as short,",
						"          topping_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu),",
						"     topping = collect(topping_type)) ~> aggregate1",
						"aggregate1 derive(topping = replace(replace(toString(topping),']'),'[')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'samplecontainer',",
						"     folderPath: 'output',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['mergerows.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu,",
						"          topping",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/split_rows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "delimited_file_ds",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "delimited_output_ds",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          type as string,",
						"          name as string,",
						"          batter_id as short,",
						"          batter_type as string,",
						"          ppu as double,",
						"          topping as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 derive(topping = split(topping,',')) ~> derivedColumn1",
						"derivedColumn1 foldDown(unroll(topping),",
						"     mapColumn(",
						"          id,",
						"          type,",
						"          name,",
						"          batter_id,",
						"          batter_type,",
						"          ppu,",
						"          toppings = topping",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['splitrows.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "loading csv file as Json with nested hierarchy using azure data factory mapping data flows.",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CSV_JSON",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T14:06:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CSV_JSON')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Json_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "converting json files to csv files",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "json1_csv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"FileName": "json_sample2.json"
									},
									"source2": {
										"FileName": "json_sample3.json"
									},
									"source3": {
										"FileName": "json_sample4.json"
									},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:17:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/json1_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_json_data_token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Working with Token based REST API in Azure Data Factory",
				"activities": [
					{
						"name": "Login_user",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/authaccount/login",
							"method": "POST",
							"headers": {},
							"body": {
								"email": "srilatha12@gmail.com",
								"password": "srilatha12"
							}
						}
					},
					{
						"name": "Get Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Login_user",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/users",
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Login_user').output.data.Token}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Loop through pages",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@Range(1,3)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data API Data to a table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"additionalHeaders": {
												"Authorization": {
													"value": "Bearer @{activity('Login_user').output.data.Token}",
													"type": "Expression"
												}
											},
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['id']"
													},
													"sink": {
														"name": "user_id"
													}
												},
												{
													"source": {
														"path": "[['name']"
													},
													"sink": {
														"name": "user_name"
													}
												},
												{
													"source": {
														"path": "[['email']"
													},
													"sink": {
														"name": "user_email"
													}
												},
												{
													"source": {
														"path": "[['profilepicture']"
													},
													"sink": {
														"name": "user_profile_picture"
													}
												},
												{
													"source": {
														"path": "[['location']"
													},
													"sink": {
														"name": "user_location"
													}
												},
												{
													"source": {
														"path": "[['createdat']"
													},
													"sink": {
														"name": "cretedat"
													}
												}
											],
											"collectionReference": "$['data']",
											"mapComplexValuesToString": true
										}
									},
									"inputs": [
										{
											"referenceName": "Rest_Token_Pages_DS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "employeedataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-29T12:13:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employeedataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_json_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copying the data from rest api data to laod in a table ",
				"activities": [
					{
						"name": "Load Json data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['employee_name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['employee_salary']"
										},
										"sink": {
											"name": "salary"
										}
									},
									{
										"source": {
											"path": "[['employee_age']"
										},
										"sink": {
											"name": "age"
										}
									},
									{
										"source": {
											"path": "[['profile_image']"
										},
										"sink": {
											"name": "profile_image"
										}
									},
									{
										"source": {
											"path": "$['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "$['message']"
										},
										"sink": {
											"name": "message"
										}
									}
								],
								"collectionReference": "$['data']",
								"mapComplexValuesToString": true
							}
						},
						"inputs": [
							{
								"referenceName": "Rest_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-28T10:52:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process_fixed_length_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "5. Process fixed length text files by Azure Data Factory mapping data flows",
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "fixed_length_files",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T11:51:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/fixed_length_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "archive files after copying  from files to SQL DB",
				"activities": [
					{
						"name": "Copy_file_SServer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"DEPARTMENT_ID"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DEPARTMENT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEPARTMENT_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MANAGER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LOCATION_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LOCATION_ID",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Archiveing File",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Archie_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy_file_SServer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Archiveing File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "empdataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Delete1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://sendemailnotification1.azurewebsites.net:443/api/sateful_workflow/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=sO1_rBk3SHn-TurKQKXH7FX5hWKcDnWJmPJZKvXyv8c",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"message\" : \"This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.\",\n    \"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n    \"pipelineName\" : \"@{pipeline().Pipeline}\", \n    \"receiver\" : \"@{pipeline().parameters.receiver}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "String",
						"defaultValue": "srilathacse01@outlook.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-27T13:29:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_subfolders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "creating pipeline to het list of sub folders and files",
				"activities": [
					{
						"name": "subfolder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_1",
								"type": "DatasetReference",
								"parameters": {
									"dir": {
										"value": "@concat(pipeline().parameters.dir1,'/')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "loop through sub folders",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "subfolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('subfolder').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline2",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "get_subfolders_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Path": {
												"value": "@concat(pipeline().parameters.dir1,'/',item().name,'/')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dir1": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-26T15:50:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/increment_keys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "increment_keys",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"allemp": {
										"FolderName": "increment",
										"FileName": "allemp.csv"
									},
									"allemp2": {
										"FolderName": "increment",
										"FileName": "allemp.csv"
									},
									"getmaxkey": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-08T12:14:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/increment_keys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mergerows_singlerow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "merge_mutiple_rows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-31T16:52:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/merge_mutiple_rows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/process_multiple_excel_sheets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Delimited_param",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "input",
									"FileName": "\\"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name,'.xlsx')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Execute Pipeline1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "child_pipeline_excel_files",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"filename": {
															"value": "@item().name",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-05T08:18:07Z"
			},
			"dependsOn": []
		}
	]
}